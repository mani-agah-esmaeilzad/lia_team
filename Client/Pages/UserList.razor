@page "/userList"
@inject HttpClient Http

@using Client.Models

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
@if (users != null)
{

    <div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title text-uppercase mb-0">Manage Users</h5>
                    <NavLink href="AddUser" class="p-5">
                        <p>add Users</p>
                    </NavLink>
                </div>
                <div class="table-responsive">
                    <table class="table no-wrap user-table mb-0">
                        <thead>
                            <tr>
                                <th scope="col" class="border-0 text-uppercase font-medium pl-4">#</th>
                                <th scope="col" class="border-0 text-uppercase font-medium">name</th>
                                <th scope="col" class="border-0 text-uppercase font-medium">last name</th>
                                <th scope="col" class="border-0 text-uppercase font-medium">number</th>
                                <th scope="col" class="border-0 text-uppercase font-medium">address</th>
                                <th scope="col" class="border-0 text-uppercase font-medium">role</th>
                                <th scope="col" class="border-0 text-uppercase font-medium">manage</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in users)
                                {
                                    <tr>
                                        <td class="pl-4">1</td>
                                        <td>
                                            <h5 class="font-medium mb-0">@item.Name</h5>
                                        </td>
                                        <td>
                                            <span class="text-muted">@item.LastName</span>
                                        </td>
                                        <td>
                                            <span class="text-muted">@item.Number</span>
                                        </td>
                                        <td>
                                            <span class="text-muted">@item.Address</span>
                                        </td>
                                        <td>
                                            <span class="text-muted">@item.Role</span>
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-outline-info btn-circle btn-lg btn-circle"><i
                                                    class="fa fa-key"></i> </button>
                                            <button type="button" @onclick="@(async () => await Delete(users[i].Id))"
                                                class="btn btn-outline-info btn-circle btn-lg btn-circle ml-2"><i
                                                    class="fa fa-trash"></i> </button>

                                            <button type="button"
                                                class="btn btn-outline-info btn-circle btn-lg btn-circle ml-2">
                                                <NavLink href="@($"EditUser/{users[i].Id}")"> <i class="fa fa-edit"></i>
                                                </NavLink>

                                            </button>
                                            <button type="button"
                                                class="btn btn-outline-info btn-circle btn-lg btn-circle ml-2"><i
                                                    class="fa fa-upload"></i> </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">
    no data
</div>
}
<style>
    .card {
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0 solid transparent;
        border-radius: 0;
    }

    .btn-circle.btn-lg,
    .btn-group-lg>.btn-circle.btn {
        width: 50px;
        height: 50px;
        padding: 14px 15px;
        font-size: 18px;
        line-height: 23px;
    }

    .text-muted {
        color: #8898aa !important;
    }

    [type=button]:not(:disabled),
    [type=reset]:not(:disabled),
    [type=submit]:not(:disabled),
    button:not(:disabled) {
        cursor: pointer;
    }

    .btn-circle {
        border-radius: 100%;
        width: 40px;
        height: 40px;
        padding: 10px;
    }

    .user-table tbody tr .category-select {
        max-width: 150px;
        border-radius: 20px;
    }
</style>
@code {
    bool isRendering = false;
    private List<User> users = new List<User>();
    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<User>>("http://localhost:5226/api/user");
    }
    protected override void OnParametersSet()
    {
        isRendering = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendering = false;
        }
    }
}
@functions {
    protected async Task Delete(string id)
    {
        if (isRendering)
        {
            // If the component is rendering, delay the deletion
            await Task.Delay(1000);
        }
        var url = "http://localhost:5226/api/user/{id}";
        await Http.DeleteAsync(url);
        // After deletion, re-render the component
        StateHasChanged();
    }
}
@code {
    bool isRendering = false;
    private List<User> users = new List<User>();
    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<User>>("http://localhost:5226/api/user");
    }
    protected override void OnParametersSet()
    {
        isRendering = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendering = false;
        }
    }
}
@functions {
    protected async Task Delete(string id)
    {
        if (isRendering)
        {
            // If the component is rendering, delay the deletion
            await Task.Delay(1000);
        }
        var url = "http://localhost:5226/api/user/{id}";
        await Http.DeleteAsync(url);
        // After deletion, re-render the component
        StateHasChanged();
    }
}
